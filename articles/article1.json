{
  "title": "Javaで配色支援GUIアプリを作成しました",
  "tag": [
    "java",
    "デザイン",
    "配色"
  ],
  "date": "20230404",
  "section": [
    {
      "type": "subtitle",
      "value": "GUIアプリを作った"
    },
    {
      "type": "content",
      "value": "授業の自由課題でGUIアプリを作成しました。デザインする際、でたらめに使いたい色を使ってはいけません。配色には理論があります。その理論に当てはめてデザイナーはデザインを決定しています。理論も複数あって、どんな印象を与えるかが変わるのでデザイナーはよく配色支援ツールを使います。今回はユーザーが使いたい色にあう配色をオススメするアプリを作成しました。http://colormind.io/↑目指したのはこんな感じの機能"
    },
    {
      "type": "subtitle",
      "value": "アプリの概要"
    },
    {
      "type": "content",
      "value": "ユーザーは12色ある色から自分が使いたい色を決定するか、カラーコード(16進数、RGBd)で色を決定します。決定後、画像右にある相性のいい色の部分に理論に沿った色を出してくれます。今回のアプリではトライアド配色、スプリッド・コメンタリー配色、アナロガス配色という配色パターンで色を表示しています。"
    },
    {
      "type": "image",
      "value": "article1.png"
    },
    {
      "type": "subtitle", 
      "value": "トライアド配色"
    },
    {
      "type": "content",
      "value": "色相環を指定した色を頂点として3等分色相環上を正三角形にとるのでバランスのとれた安定感のある配色となります。画像では例えば黄色を選ぶと三角形の頂点の三つが相性の良い色になります。参考文献https://onl.bz/mLiKkc4"
    },
    {
      "type": "image",
      "value": "article2.png"
    },
    {
      "type": "subtitle",
      "value": "スプリッド・コメンタリー配色"
    },
    {
      "type": "content",
      "value": "指定した色の補色(反対の位置にある色)の類似色(隣り合っている色)の組み合わせ。画像では黄色の補色である紫の隣り合っている色が相性の良い色です。補色配色(色相にコントラストがある)の性質と 類似配色(色相に類似性がある)の2つの面を持っています。参考文献https://onl.bz/if8TdD9"
    },
    {
      "type": "image",
      "value": "article3.png"
    },
    {
      "type": "subtitle",
      "value": "アナロガス配色"
    },
    {
      "type": "content",
      "value": "指定した色の類似色の組み合わせ。スプリッド・コメンタリー配色は補色の類似色ですが、アナロガス配色は単純に指定した色の類似色です。グラデーションが作りやすく、調和をとりやすくなります。統一感が感じられるので、選んだ色のイメージが伝わりやすくなります。参考文献https://onl.bz/PvdXmYV"
    },
    {
      "type": "image",
      "value": "article4.png"
    },
    {
      "type": "subtitle",
      "value": "UIに色を指定する方法"
    },
    {
      "type": "content",
      "value": "色の指定方法を説明します。すでに知っている人は飛ばしてください。今回私がGUIアプリで使ったのはJavaのColorクラスです。javaSE8, https://sun.ac.jp/prof/yamagu/java8docs/api/java/awt/Color.htmlLabelやButton、Textに色を設定する際に使います。"
    },
    {
      "type": "code",
      "value": "label.setForegroud(Color.Red);"
    },
    {
      "type": "content",
      "value": "REDやBLUEなどで指定可能ですが、もっと細かい色を設定したいときには↓のように書きます。"
    },
    {
      "type": "code",
      "value": "label.setBackground(new Color(10, 30, 50));"
    },
    {
      "type": "content",
      "value": "ColorオブジェクトをRGBで指定して生成、その後setBackgroundしています。"
    },
    {
      "type": "code",
      "value": "label.setBackground(Color.decode(\"#FFFFFF\"));"
    },
    {
      "type": "content",
      "value": "このように16進数でも指定できます。"
    },
    {
      "type": "subtitle",
      "value": "トライアド配色の導き方"
    },
    {
      "type": "content",
      "value": "ここからは実際にコードを見ながら配色の導き方を説明していきます。"
    },
    {
      "type": "code",
      "value": "public void triad() {\nint R, G, B;\nint x;\nR = choiceColor.getBackground().getRed();\nG = choiceColor.getBackground().getGreen();\nB = choiceColor.getBackground().getBlue();\nx = R;\nR = G;\nG = B;\nB = x;\ntriadColor1.setBackground(new Color(R, G, B));\nx = R;\nR = G;\nG = B;\nB = x;\ntriadColor2.setBackground(new Color(R, G, B));\n}"
    },
    {
      "type": "content",
      "value": "これはトライアド配色の導き方です。復習ですが、トライアド配色は指定した色のを基準に色相環を3等分して、それぞれの頂点に位置する色の組み合わせになります。色をRGBで表したときにそれぞれの色を入れ替えることでそれぞれの頂点の色が指定できます。"
    },
    {
      "type": "image",
      "value": "article5.png"
    },
    {
      "type": "content",
      "value": "図の例ではオレンジ色(#FF4500)を指定してトライアド配色を出しました。RGBの値を見てみるとそれぞれの値が入れ替わっているだけだということが分かります。"
    },
    {
      "type": "subtitle",
      "value": "スプリッド・コメンタリー配色とアナロガス配色の導き方"
    },
    {
      "type": "content",
      "value": "スプリッド・コメンタリー配色とアナロガス配色は導き方がほぼ同じです。復習します。スプリッド・コメンタリー配色:指定色の補色の類似色の組み合わせアナロガス配色:指定色の類似色の組み合わせつまり類似色を出すことは共通しており、それが補色のものか、指定色のものかの違いしかありません。メソッドを比較してもほとんど変わりません。↓上からアナロガス配色、スプリッド・コメンタリー配色のメソッド"
    },
    {
      "type": "code",
      "value": "public void analogous() {\nint change = 60; // 変化量\nint red = choiceColor.getBackground().getRed();\nint green = choiceColor.getBackground().getGreen();\nint blue = choiceColor.getBackground().getBlue();\nfloat[] targetHSB = Color.RGBtoHSB(red, green, blue, null);\nint hueInt = (int) (targetHSB[0] * 360);// Int型の色相値\n\nint changedHue1 = hueInt + change;\nint changedHue2 = hueInt - change;\n\nanalogousColor1.setBackground(new Color(Color.HSBtoRGB((float) (changedHue1) / 360, targetHSB[1], targetHSB[2])));\n\nanalogousColor2.setBackground(new Color(Color.HSBtoRGB((float) (changedHue2) / 360, targetHSB[1], targetHSB[2])));\n}"
    },
    {
      "type": "code",
      "value": "public void splitCommentary() {\nint change = 30; // 変化量\nint red = choiceColor.getBackground().getRed();\nint green = choiceColor.getBackground().getGreen();\nint blue = choiceColor.getBackground().getBlue();\nfloat[] targetHSB = Color.RGBtoHSB(red, green, blue, null);\nint hueInt = (int) (targetHSB[0] * 360);// Int型の色相値\n\nint changedHue1 = hueInt + change + 180;\nint changedHue2 = hueInt - change + 180;\n\nsplitCommentaryColor1\n.setBackground(new Color(Color.HSBtoRGB((float) (changedHue1) / 360, targetHSB[1], targetHSB[2])));\nsplitCommentaryColor2\n.setBackground(new Color(Color.HSBtoRGB((float) (changedHue2) / 360, targetHSB[1], targetHSB[2])));\n\n}"
    },
    {
      "type": "content",
      "value": "この2つのメソッドで違う部分はこの部分です。"
    },
    {
      "type": "code",
      "value": "int changedHue1 = hueInt + change + 180;"
    },
    {
      "type": "code", 
      "value": "int changedHue2 = hueInt - change + 180;"
    },
    {
      "type": "content",
      "value": "+180することで補色になるため、スプリッド・コメンタリー配色では+180しています。"
    },
    {
      "type": "subtitle", 
      "value": "HSBでColorを指定する"
    },
    {
      "type": "content",
      "value": "上記のメソッドではアナロガス配色では見られなかったColorクラスのメソッドがあります。"
    },
    {
      "type": "code",
      "value": "RGBtoHSB();"
    },
    {
      "type": "code",
      "value": "HSBtoRGB();"
    },
    {
      "type": "content",
      "value": "見たままの通りですがRGB値をHSB値に変換したり、またはその逆をしています。なぜわざわざHSBに変換しているかというと、類似色や補色が簡単に出せるからです。+180をするだけで補色を出すのはRGBにはできません。HSBはH(Hue)色相、S(Saturation)彩度、B(Brightness)明度 で色を表しています。つまりH(Hue)の値を変えるだけで補色や類似色が出せるのです。1.指定した色のRGB値を取得2.RGB値をHSB値に変換3.変換した値のH(Hue)を改変アナロガス配色なら+60(類似色の分)だけ、スプリッド・コメンタリー配色なら+180(補色にするため)も追加4.RGB値でしかsetBackgourndできないためRGB値に変換して設定"
    },
    {
      "type": "image",
      "value": "article6.png"
    },
    {
      "type": "content",
      "value": "図のようなイメージで考えればいいです。指定色(オレンジ色)を起点に360度ある色相環に+60、-60すれば類似色が出ます。360度の半分である+180をすれば補色(図で言うと水色の部分)が指定されます。RGBtoHSBメソッドやHSBtoRGBメソッドの使い方はここでは紹介しません。私はJavaSE8の公式ドキュメントを見て使い方を調べたので参考までに、javaSE8, https://sun.ac.jp/prof/yamagu/java8docs/api/java/awt/Color.html"
    },
    {
      "type": "subtitle", 
      "value": "余談"
    },
    {
      "type": "content",
      "value": "トライアド配色はRGBのそれぞれの値を入れ替えて色を指定していました。ではそれぞれの値が全く同じものではどのような配色になるのでしょうか。例えば#646464ではどうでしょう。#646464のRGB値はR:100 G:100 B:100です。これでは値を入れ替えても色は変化しません。実際にアプリで指定してみます"
    },
    {
      "type": "image",
      "value": "article7.jpg"
    },
    {
      "type": "content",
      "value": "やはり変化していませんね。これは「無彩色」と呼ばれるそうです。"
    },
    {
      "type": "reference",
      "value": "白、灰、黒の系統に属する色みのない色のこと。赤、緑、青などのような色みのある有彩色と区別される。無彩色は、色の3属性である色相、明度、彩度のうち、明度だけをもつ色である。"
    },
    {
      "type": "content",
      "value": "コトバンクからの引用です。つまり変化させる色彩がないためどの配色パターンでも同じような色が出てしまうのです。始め、無彩色の存在を知らずに計算式が間違っているのではないかと心配になりましたがデザインに詳しい友人から教えてもらい安心しました。"
    },
    {
      "type": "subtitle",
      "value": "RGBで補色や類似色を出そうとした"
    },
    {
      "type": "content", 
      "value": "最終的にはHSBに変換して配色を導き出していましたが、初めはRGBだけで完結させようとしていました。以下のサイトではこのように補色を計算しています。"
    },
    {
      "type": "reference",
      "value": "補色の計算式 補色の計算式はRGB値の最大値と最小値を加算して、その値で各RGB値を引いた値となります。 例えば、RGB(255,72,172)という色の場合は、最大値の「255」と最小値の「72」を加算した「327」を使用して各RGBを減算します。 R = 327- 255 G = 327- 72 B = 327- 172 RGB(72,255,155)が補色となります。"
    },
    {
      "type": "link",
      "value": "参考サイト:プチモンテ,色相環と12色相環[作成と計算式]",
      "url": "https://www.petitmonte.com/javascript/color_wheel.html#:~:text=%E8%A3%9C%E8%89%B2%E3%81%AE%E8%A8%88%E7%AE%97%E5%BC%8F%E3%81%AF,RGB%E3%82%92%E6%B8%9B%E7%AE%97%E3%81%97%E3%81%BE%E3%81%99%E3%80%82&text=RGB(72%2C255%2C155)%E3%81%8C%E8%A3%9C%E8%89%B2%E3%81%A8%E3%81%AA%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82"
    },
    {
      "type": "content",
      "value": "この計算を実現するために最大値と最小値を出すメソッドを準備したりしなければならず、私の頭では難しかったためいろいろ調べてHSBに行きつきました。RGBだけで計算するコードから大体100行くらい短縮できたので大満足です。欲を言えばJLabelやJbuttonのカラーの設定がそのままHSBでできれば嬉しかったのですが、、、ColorクラスのオブジェクトをHSBで設定する方法を知っている方が居たら教えていただきたいです!"
    }
  ]
  }
