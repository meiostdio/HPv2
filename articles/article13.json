{
  "title": "meiostdioの技術構成から知る初めてのセキュリティ",
  "tag": [
    "セキュリティ"
  ],
  "date": "20240311",
  "section": [
    {
      "type": "subtitle",
      "value": "この記事で分かること"
    },
    {
      "type": "content",
      "value": "・サーバーはなぜ必要か\n・クライアント側で実行していい処理、してはいけない処理\n大学の授業で勉強している範囲ではセキュリティ対策についてあまり想像がつかないと思います。\nこの記事では新サイトを作るにあたって僕自身が初めて直面したセキュリティ対策について書いていきます。\nセキュリティについてなんとなくのイメージを持つことが出来ると思います。"
    },
    {
      "type": "subtitle",
      "value": "新しい記事投稿サイトをつくるにあたって"
    },
    {
      "type": "content",
      "value": "meiostdioので新しいサイトを作成するにあたって、Githubに対して記事の内容(画像やテキストデータ等)を送受信するような機能を実装したいと考えました。\nGithubをストレージとして使用するイメージです。\nAPIというものを介してGithubにアクセスし、データの受信、送信を行います。"
    },
    {
      "type": "link",
      "value": "APIとは何か？",
      "url": "https://www.sbbit.jp/article/cont1/62752"
    },
    {
      "type": "subtitle",
      "value": "Githubからデータを送受信する"
    },
    {
      "type": "content",
      "value": "さて、Githubが提供しているAPIを介してデータを受信するにはAPIキーというものが必要です。\nAPIキーをセットすることで、データにアクセスする権限があるかどうかを確認があるかどうかGithub側が確認します。\nつまりAPIキーは外に絶対に見せてはいけません。\nmeiostdioで使用しているAPIキーが漏洩すると不正アクセスにより以下のような障害が発生します。\n・不正に取得したキーで何度もアクセスを繰り返すことで記事の閲覧、投稿が出来なくなる。\n・Githubのリポジトリ(データの格納スペースのようなもの)が編集、削除される。"
    },
    {
      "type": "subtitle",
      "value": "クライアント側にあるAPIキーは余裕で取得できる"
    },
    {
      "type": "content",
      "value": "APIキーを隠すことは本サイトを構築するうえで絶対のルールです。ほとんどの場合、どのサイトでも同様です。\nAPIキーはどのようにして漏洩するのでしょうか？\n本サイトの記事投稿画面では入力フォームがありますが、そこに以下のコードを打ち込んだ場合、通知が表示されると思います。"
    },
    {
      "type": "code",
      "value": "<script>\n   alert('アラート');\n</script>"
    },
    {
      "type": "content",
      "value": "このコードを書き換えて以下のようにします。"
    },
    {
      "type": "code",
      "value": "<script>\n   alert(apikey);\n</script>"
    },
    {
      "type": "content",
      "value": "もしapikeyという変数にAPIキーを格納している場合、上記のコードで簡単に取得できてしまいます。\nサイト内で右クリック→ページのソースを表示からページ全体のソースコードを表示できてしまうので、変数名の特定も容易にできます。\nつまりクライアント側でAPIキーを扱ってはいけません。"
    },
    {
      "type": "subtitle",
      "value": "どうやってキーを隠すか"
    },
    {
      "type": "content",
      "value": "ここでサーバーの出番です。\n鋭い方は気づくかもしれませんが、サーバー側でAPIキーを使用して記事データにアクセスして結果のみをクライアント側に送信する方法をとります。\nmeiostdioではVercelというサービスを使用してページの公開と、サーバーサイドの実装をしています。\nVercelでGithubにアクセスしてその結果をそのままクライアント側に送信するような構成にしました。\n以下の画像はイメージになります。"
    },
    {
      "type": "image",
      "value": "article1.png"
    },
    {
      "type": "content",
      "value": "Vercelの中のサーバーサイドのコードはクライアント側からも見ることが出来ますが、環境変数という機能を使用してAPIキーを隠します。\n以下のコードは実際にAPIキーを変数に格納しているコードです。"
    },
    {
      "type": "code",
      "value": "  // Vercelの環境変数からGitHubトークンを取得\n  const token = process.env.GITHUB_API_KEY;"
    },
    {
      "type": "content",
      "value": "VercelのサイトでGITHUB_API_KEYという変数を作成してその中にAPIキーを格納することで上記のコードでAPIキーを使用できます。\nこのコードは公開したとしてもmeiostdioの管理者のアカウントが無ければ中身を知ることが出来ません。\nセキュリティ対策のイメージが出来たと思います。"
    },
    {
      "type": "subtitle",
      "value": "サーバーの必要性"
    },
    {
      "type": "content",
      "value": "今まで大学の講義では自己紹介サイトなどを作成したと思います。\n簡単なサイトを作るだけであればサーバーは必要ありませんが、データの送受信を行う機能の実装にはサーバーサイドプログラミングがマストになります。\n本記事でセキュリティをイメージするきっかけになれば幸いです。"
    }
  ],
  "user": "Akamine",
  "picture": "https://lh3.googleusercontent.com/a/ACg8ocKLdG1z_ioPRPqTayrp1zF9xjVX7A8sGplgr2F3QmuV=s96-c"
}